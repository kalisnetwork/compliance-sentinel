apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-sentinel
  namespace: compliance-sentinel
  labels:
    app: compliance-sentinel
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: compliance-sentinel
  template:
    metadata:
      labels:
        app: compliance-sentinel
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      imagePullSecrets:
        - name: docker-registry-secret
      serviceAccountName: compliance-sentinel
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: compliance-sentinel
          image: compliance-sentinel:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: LOG_LEVEL
              value: "INFO"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: compliance-sentinel-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: compliance-sentinel-secrets
                  key: redis-url
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: compliance-sentinel-secrets
                  key: secret-key
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: compliance-sentinel-secrets
                  key: jwt-secret
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: data
              mountPath: /app/data
            - name: logs
              mountPath: /app/logs
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 2000m
              memory: 2Gi
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
      volumes:
        - name: config
          configMap:
            name: compliance-sentinel-config
        - name: data
          persistentVolumeClaim:
            claimName: compliance-sentinel-data
        - name: logs
          emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - compliance-sentinel
                topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-sentinel-worker
  namespace: compliance-sentinel
  labels:
    app: compliance-sentinel-worker
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: compliance-sentinel-worker
  template:
    metadata:
      labels:
        app: compliance-sentinel-worker
        version: v1
    spec:
      imagePullSecrets:
        - name: docker-registry-secret
      serviceAccountName: compliance-sentinel
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: worker
          image: compliance-sentinel:latest
          imagePullPolicy: Always
          command: ["python", "-m", "compliance_sentinel.worker.main"]
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: LOG_LEVEL
              value: "INFO"
            - name: WORKER_MODE
              value: "true"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: compliance-sentinel-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: compliance-sentinel-secrets
                  key: redis-url
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: data
              mountPath: /app/data
            - name: logs
              mountPath: /app/logs
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          livenessProbe:
            exec:
              command:
                - python
                - -c
                - "import redis; r = redis.from_url('${REDIS_URL}'); r.ping()"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: config
          configMap:
            name: compliance-sentinel-config
        - name: data
          persistentVolumeClaim:
            claimName: compliance-sentinel-data
        - name: logs
          emptyDir: {}