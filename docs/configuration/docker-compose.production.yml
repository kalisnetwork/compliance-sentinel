# Production Docker Compose Configuration
# This file demonstrates how to deploy Compliance Sentinel in a production environment
# with proper service separation, security, and monitoring

version: '3.8'

services:
  # Main Compliance Sentinel Application
  compliance-sentinel:
    image: compliance-sentinel:${VERSION:-latest}
    container_name: compliance-sentinel-app
    restart: unless-stopped
    
    # Environment configuration
    env_file:
      - .env.production
    
    environment:
      # Override specific settings for containerized deployment
      COMPLIANCE_SENTINEL_LOG_DESTINATION: stdout
      COMPLIANCE_SENTINEL_REDIS_HOST: redis
      COMPLIANCE_SENTINEL_DB_HOST: postgres
      
    # Resource limits (adjust based on your infrastructure)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Port mapping (only expose what's necessary)
    ports:
      - "8000:8000"  # MCP Server
      - "8080:8080"  # Health check
      - "9090:9090"  # Metrics (consider restricting to internal network)
    
    # Volume mounts
    volumes:
      - app-logs:/var/log/compliance-sentinel
      - app-data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For container monitoring
    
    # Network
    networks:
      - compliance-network
      - monitoring-network
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"  # Run as non-root user
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: compliance-sentinel-redis
    restart: unless-stopped
    
    # Redis configuration
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Persistence
    volumes:
      - redis-data:/data
    
    # Network
    networks:
      - compliance-network
    
    # Security
    security_opt:
      - no-new-privileges:true

  # PostgreSQL Database (if using database storage)
  postgres:
    image: postgres:15-alpine
    container_name: compliance-sentinel-postgres
    restart: unless-stopped
    
    # Environment variables
    environment:
      POSTGRES_DB: compliance_sentinel_prod
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d compliance_sentinel_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Persistence
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    
    # Network
    networks:
      - compliance-network
    
    # Security
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: compliance-sentinel-nginx
    restart: unless-stopped
    
    # Configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    
    # Port mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Network
    networks:
      - compliance-network
      - monitoring-network
    
    # Dependencies
    depends_on:
      - compliance-sentinel
    
    # Security
    security_opt:
      - no-new-privileges:true

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: compliance-sentinel-prometheus
    restart: unless-stopped
    
    # Configuration
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Command line options
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    # Port mapping (restrict to internal network in production)
    ports:
      - "9091:9090"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Network
    networks:
      - monitoring-network
    
    # Security
    security_opt:
      - no-new-privileges:true

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: compliance-sentinel-grafana
    restart: unless-stopped
    
    # Environment variables
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
    
    # Configuration and data
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Port mapping
    ports:
      - "3000:3000"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    
    # Network
    networks:
      - monitoring-network
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Security
    security_opt:
      - no-new-privileges:true
    user: "472:472"  # Grafana user

  # Log Aggregation (ELK Stack - Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: compliance-sentinel-elasticsearch
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Persistence
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    
    # Port mapping (restrict in production)
    ports:
      - "9200:9200"
    
    # Network
    networks:
      - monitoring-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: compliance-sentinel-logstash
    restart: unless-stopped
    
    # Configuration
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - app-logs:/var/log/compliance-sentinel:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Network
    networks:
      - monitoring-network
    
    # Dependencies
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: compliance-sentinel-kibana
    restart: unless-stopped
    
    # Environment configuration
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    
    # Port mapping
    ports:
      - "5601:5601"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Network
    networks:
      - monitoring-network
    
    # Dependencies
    depends_on:
      elasticsearch:
        condition: service_healthy

# Networks
networks:
  compliance-network:
    driver: bridge
    internal: true  # Internal network for service communication
  monitoring-network:
    driver: bridge

# Volumes
volumes:
  app-logs:
    driver: local
  app-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  nginx-logs:
    driver: local

# Secrets (use Docker secrets in production)
secrets:
  db_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true