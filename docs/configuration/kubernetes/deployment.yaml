# Kubernetes Deployment for Compliance Sentinel
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-sentinel
  namespace: compliance-sentinel
  labels:
    app.kubernetes.io/name: compliance-sentinel
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: compliance-platform
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: compliance-sentinel
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: compliance-sentinel
        app.kubernetes.io/component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: compliance-sentinel-sa
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Init containers
      initContainers:
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z redis-service 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      
      # Main application container
      containers:
      - name: compliance-sentinel
        image: compliance-sentinel:1.0.0
        imagePullPolicy: IfNotPresent
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        
        # Ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: health
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: compliance-sentinel-config
        
        # Environment variables from Secrets
        env:
        - name: COMPLIANCE_SENTINEL_AUTH_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: compliance-sentinel-secrets
              key: COMPLIANCE_SENTINEL_AUTH_JWT_SECRET
        - name: COMPLIANCE_SENTINEL_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: compliance-sentinel-secrets
              key: COMPLIANCE_SENTINEL_REDIS_PASSWORD
        - name: COMPLIANCE_SENTINEL_NVD_API_KEY
          valueFrom:
            secretKeyRef:
              name: compliance-sentinel-secrets
              key: COMPLIANCE_SENTINEL_NVD_API_KEY
        - name: COMPLIANCE_SENTINEL_GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: compliance-sentinel-secrets
              key: COMPLIANCE_SENTINEL_GITHUB_TOKEN
        
        # Resource limits and requests
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
            ephemeral-storage: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
            ephemeral-storage: 1Gi
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: health
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: health
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: health
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-data
          mountPath: /app/data
        - name: cache
          mountPath: /app/cache
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: app-data
        emptyDir:
          sizeLimit: 2Gi
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/os: linux
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - compliance-sentinel
              topologyKey: kubernetes.io/hostname
      
      # Tolerations (if needed for specific node pools)
      tolerations:
      - key: "compliance-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # Termination grace period
      terminationGracePeriodSeconds: 60

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: compliance-sentinel
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        
        # Command with authentication
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        
        # Environment variables
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: compliance-sentinel-secrets
              key: COMPLIANCE_SENTINEL_REDIS_PASSWORD
        
        # Ports
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        
        # Resource limits
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        
        # Health checks
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --raw
            - incr
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --raw
            - incr
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Volume mounts
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
      
      # Volumes
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi