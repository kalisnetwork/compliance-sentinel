[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "compliance-sentinel"
version = "0.1.0"
authors = [
    {name = "Compliance Sentinel Team", email = "team@compliance-sentinel.dev"},
]
description = "Proactive Security and Compliance Enforcement System for Development Workflows"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Security",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: Web Environment",
]
keywords = [
    "security", "compliance", "static-analysis", "vulnerability-scanning",
    "code-quality", "devsecops", "sast", "dependency-scanning",
    "policy-enforcement", "kiro", "ide-integration"
]
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "semgrep>=1.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.0",
    "watchdog>=3.0.0",
    "psutil>=5.9.0",
    "cachetools>=5.3.0",
]
dynamic = []

[project.urls]
Homepage = "https://github.com/compliance-sentinel/compliance-sentinel"
Documentation = "https://compliance-sentinel.readthedocs.io/"
Repository = "https://github.com/compliance-sentinel/compliance-sentinel.git"
"Bug Reports" = "https://github.com/compliance-sentinel/compliance-sentinel/issues"
Changelog = "https://github.com/compliance-sentinel/compliance-sentinel/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-click>=4.4.0",
]
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]
all = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-click>=4.4.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]

[project.scripts]
compliance-sentinel = "compliance_sentinel.cli:cli"
cs = "compliance_sentinel.cli:cli"

[project.entry-points."compliance_sentinel.analyzers"]
bandit = "compliance_sentinel.analyzers.bandit_analyzer:BanditAnalyzer"
semgrep = "compliance_sentinel.analyzers.semgrep_analyzer:SemgrepAnalyzer"

[project.entry-points."compliance_sentinel.scanners"]
safety = "compliance_sentinel.scanners.dependency_scanner:DependencyScanner"

[tool.setuptools]
packages = ["compliance_sentinel"]
include-package-data = true

[tool.setuptools.package-data]
compliance_sentinel = [
    "config/templates/*.yaml",
    "config/templates/*.json",
    "hooks/templates/*.json",
    "hooks/templates/*.py",
    "mcp_server/openapi.yaml",
    "data/*.json",
    "data/*.yaml",
]



# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "bandit.*",
    "semgrep.*",
    "safety.*",
    "watchdog.*",
    "psutil.*",
    "cachetools.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "load: marks tests as load tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["compliance_sentinel"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# See setup.cfg for flake8 configuration